package app.fpp.model.views.masterdata.ebs;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 26 10:12:48 ICT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class KodePostingBJPViewRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Item {
            public Object get(KodePostingBJPViewRowImpl obj) {
                return obj.getItem();
            }

            public void put(KodePostingBJPViewRowImpl obj, Object value) {
                obj.setItem((String)value);
            }
        }
        ,
        ItemDescription {
            public Object get(KodePostingBJPViewRowImpl obj) {
                return obj.getItemDescription();
            }

            public void put(KodePostingBJPViewRowImpl obj, Object value) {
                obj.setItemDescription((String)value);
            }
        }
        ,
        PrimaryUom {
            public Object get(KodePostingBJPViewRowImpl obj) {
                return obj.getPrimaryUom();
            }

            public void put(KodePostingBJPViewRowImpl obj, Object value) {
                obj.setPrimaryUom((String)value);
            }
        }
        ,
        PrimaryUnitOfMeasure {
            public Object get(KodePostingBJPViewRowImpl obj) {
                return obj.getPrimaryUnitOfMeasure();
            }

            public void put(KodePostingBJPViewRowImpl obj, Object value) {
                obj.setPrimaryUnitOfMeasure((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(KodePostingBJPViewRowImpl object);

        public abstract void put(KodePostingBJPViewRowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ITEM = AttributesEnum.Item.index();
    public static final int ITEMDESCRIPTION = AttributesEnum.ItemDescription.index();
    public static final int PRIMARYUOM = AttributesEnum.PrimaryUom.index();
    public static final int PRIMARYUNITOFMEASURE = AttributesEnum.PrimaryUnitOfMeasure.index();

    /**
     * This is the default constructor (do not remove).
     */
    public KodePostingBJPViewRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Item.
     * @return the Item
     */
    public String getItem() {
        return (String) getAttributeInternal(ITEM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Item.
     * @param value value to set the  Item
     */
    public void setItem(String value) {
        setAttributeInternal(ITEM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItemDescription.
     * @return the ItemDescription
     */
    public String getItemDescription() {
        return (String) getAttributeInternal(ITEMDESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItemDescription.
     * @param value value to set the  ItemDescription
     */
    public void setItemDescription(String value) {
        setAttributeInternal(ITEMDESCRIPTION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PrimaryUom.
     * @return the PrimaryUom
     */
    public String getPrimaryUom() {
        return (String) getAttributeInternal(PRIMARYUOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PrimaryUom.
     * @param value value to set the  PrimaryUom
     */
    public void setPrimaryUom(String value) {
        setAttributeInternal(PRIMARYUOM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PrimaryUnitOfMeasure.
     * @return the PrimaryUnitOfMeasure
     */
    public String getPrimaryUnitOfMeasure() {
        return (String) getAttributeInternal(PRIMARYUNITOFMEASURE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PrimaryUnitOfMeasure.
     * @param value value to set the  PrimaryUnitOfMeasure
     */
    public void setPrimaryUnitOfMeasure(String value) {
        setAttributeInternal(PRIMARYUNITOFMEASURE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
