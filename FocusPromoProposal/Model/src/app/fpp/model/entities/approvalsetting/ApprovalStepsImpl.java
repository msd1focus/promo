package app.fpp.model.entities.approvalsetting;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 05 10:12:24 ICT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ApprovalStepsImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        IdAprvlStep {
            public Object get(ApprovalStepsImpl obj) {
                return obj.getIdAprvlStep();
            }

            public void put(ApprovalStepsImpl obj, Object value) {
                obj.setIdAprvlStep((DBSequence)value);
            }
        }
        ,
        IdAprvlFlow {
            public Object get(ApprovalStepsImpl obj) {
                return obj.getIdAprvlFlow();
            }

            public void put(ApprovalStepsImpl obj, Object value) {
                obj.setIdAprvlFlow((Number)value);
            }
        }
        ,
        StepSequence {
            public Object get(ApprovalStepsImpl obj) {
                return obj.getStepSequence();
            }

            public void put(ApprovalStepsImpl obj, Object value) {
                obj.setStepSequence((Number)value);
            }
        }
        ,
        RoleName {
            public Object get(ApprovalStepsImpl obj) {
                return obj.getRoleName();
            }

            public void put(ApprovalStepsImpl obj, Object value) {
                obj.setRoleName((String)value);
            }
        }
        ,
        ApprovalFlow {
            public Object get(ApprovalStepsImpl obj) {
                return obj.getApprovalFlow();
            }

            public void put(ApprovalStepsImpl obj, Object value) {
                obj.setApprovalFlow((ApprovalFlowImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(ApprovalStepsImpl object);

        public abstract void put(ApprovalStepsImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int IDAPRVLSTEP = AttributesEnum.IdAprvlStep.index();
    public static final int IDAPRVLFLOW = AttributesEnum.IdAprvlFlow.index();
    public static final int STEPSEQUENCE = AttributesEnum.StepSequence.index();
    public static final int ROLENAME = AttributesEnum.RoleName.index();
    public static final int APPROVALFLOW = AttributesEnum.ApprovalFlow.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ApprovalStepsImpl() {
    }

    /**
     * Gets the attribute value for IdAprvlStep, using the alias name IdAprvlStep.
     * @return the IdAprvlStep
     */
    public DBSequence getIdAprvlStep() {
        return (DBSequence)getAttributeInternal(IDAPRVLSTEP);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdAprvlStep.
     * @param value value to set the IdAprvlStep
     */
    public void setIdAprvlStep(DBSequence value) {
        setAttributeInternal(IDAPRVLSTEP, value);
    }

    /**
     * Gets the attribute value for IdAprvlFlow, using the alias name IdAprvlFlow.
     * @return the IdAprvlFlow
     */
    public Number getIdAprvlFlow() {
        return (Number)getAttributeInternal(IDAPRVLFLOW);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdAprvlFlow.
     * @param value value to set the IdAprvlFlow
     */
    public void setIdAprvlFlow(Number value) {
        setAttributeInternal(IDAPRVLFLOW, value);
    }

    /**
     * Gets the attribute value for StepSequence, using the alias name StepSequence.
     * @return the StepSequence
     */
    public Number getStepSequence() {
        return (Number)getAttributeInternal(STEPSEQUENCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for StepSequence.
     * @param value value to set the StepSequence
     */
    public void setStepSequence(Number value) {
        setAttributeInternal(STEPSEQUENCE, value);
    }

    /**
     * Gets the attribute value for RoleName, using the alias name RoleName.
     * @return the RoleName
     */
    public String getRoleName() {
        return (String)getAttributeInternal(ROLENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for RoleName.
     * @param value value to set the RoleName
     */
    public void setRoleName(String value) {
        setAttributeInternal(ROLENAME, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity ApprovalFlowImpl.
     */
    public ApprovalFlowImpl getApprovalFlow() {
        return (ApprovalFlowImpl)getAttributeInternal(APPROVALFLOW);
    }

    /**
     * Sets <code>value</code> as the associated entity ApprovalFlowImpl.
     */
    public void setApprovalFlow(ApprovalFlowImpl value) {
        setAttributeInternal(APPROVALFLOW, value);
    }

    /**
     * @param idAprvlStep key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence idAprvlStep) {
        return new Key(new Object[]{idAprvlStep});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("app.fpp.model.entities.approvalsetting.ApprovalSteps");
        }
        return mDefinitionObject;
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq =
            new SequenceImpl("APPROVAL_STEPS_SEQ", getDBTransaction());
        this.setIdAprvlStep(new DBSequence(seq.getSequenceNumber()));
    }
}
