package app.fpp.model.entities.approvalsetting;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 05 07:50:18 ICT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ApprovalFlowImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    @Override
    protected void doDML(int operation, TransactionEvent transactionEvent) {

        if (operation == DML_INSERT) {
            this.setAprvlFlowNm(this.getAprvlFlowNm().toUpperCase());
        }
        super.doDML(operation, transactionEvent);
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        IdAprvlFlow {
            public Object get(ApprovalFlowImpl obj) {
                return obj.getIdAprvlFlow();
            }

            public void put(ApprovalFlowImpl obj, Object value) {
                obj.setIdAprvlFlow((DBSequence)value);
            }
        }
        ,
        AprvlFlowNm {
            public Object get(ApprovalFlowImpl obj) {
                return obj.getAprvlFlowNm();
            }

            public void put(ApprovalFlowImpl obj, Object value) {
                obj.setAprvlFlowNm((String)value);
            }
        }
        ,
        AprvlCode {
            public Object get(ApprovalFlowImpl obj) {
                return obj.getAprvlCode();
            }

            public void put(ApprovalFlowImpl obj, Object value) {
                obj.setAprvlCode((String)value);
            }
        }
        ,
        Version {
            public Object get(ApprovalFlowImpl obj) {
                return obj.getVersion();
            }

            public void put(ApprovalFlowImpl obj, Object value) {
                obj.setVersion((String)value);
            }
        }
        ,
        AprvlDescr {
            public Object get(ApprovalFlowImpl obj) {
                return obj.getAprvlDescr();
            }

            public void put(ApprovalFlowImpl obj, Object value) {
                obj.setAprvlDescr((String)value);
            }
        }
        ,
        Status {
            public Object get(ApprovalFlowImpl obj) {
                return obj.getStatus();
            }

            public void put(ApprovalFlowImpl obj, Object value) {
                obj.setStatus((String)value);
            }
        }
        ,
        ApprovalSteps {
            public Object get(ApprovalFlowImpl obj) {
                return obj.getApprovalSteps();
            }

            public void put(ApprovalFlowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(ApprovalFlowImpl object);

        public abstract void put(ApprovalFlowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int IDAPRVLFLOW = AttributesEnum.IdAprvlFlow.index();
    public static final int APRVLFLOWNM = AttributesEnum.AprvlFlowNm.index();
    public static final int APRVLCODE = AttributesEnum.AprvlCode.index();
    public static final int VERSION = AttributesEnum.Version.index();
    public static final int APRVLDESCR = AttributesEnum.AprvlDescr.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int APPROVALSTEPS = AttributesEnum.ApprovalSteps.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ApprovalFlowImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("app.fpp.model.entities.approvalsetting.ApprovalFlow");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for IdAprvlFlow, using the alias name IdAprvlFlow.
     * @return the IdAprvlFlow
     */
    public DBSequence getIdAprvlFlow() {
        return (DBSequence)getAttributeInternal(IDAPRVLFLOW);
    }

    /**
     * Sets <code>value</code> as the attribute value for IdAprvlFlow.
     * @param value value to set the IdAprvlFlow
     */
    public void setIdAprvlFlow(DBSequence value) {
        setAttributeInternal(IDAPRVLFLOW, value);
    }

    /**
     * Gets the attribute value for AprvlFlowNm, using the alias name AprvlFlowNm.
     * @return the AprvlFlowNm
     */
    public String getAprvlFlowNm() {
        return (String)getAttributeInternal(APRVLFLOWNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for AprvlFlowNm.
     * @param value value to set the AprvlFlowNm
     */
    public void setAprvlFlowNm(String value) {
        setAttributeInternal(APRVLFLOWNM, value);
    }

    /**
     * Gets the attribute value for AprvlCode, using the alias name AprvlCode.
     * @return the AprvlCode
     */
    public String getAprvlCode() {
        return (String)getAttributeInternal(APRVLCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for AprvlCode.
     * @param value value to set the AprvlCode
     */
    public void setAprvlCode(String value) {
        setAttributeInternal(APRVLCODE, value);
    }

    /**
     * Gets the attribute value for Version, using the alias name Version.
     * @return the Version
     */
    public String getVersion() {
        return (String)getAttributeInternal(VERSION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Version.
     * @param value value to set the Version
     */
    public void setVersion(String value) {
        setAttributeInternal(VERSION, value);
    }

    /**
     * Gets the attribute value for AprvlDescr, using the alias name AprvlDescr.
     * @return the AprvlDescr
     */
    public String getAprvlDescr() {
        return (String)getAttributeInternal(APRVLDESCR);
    }

    /**
     * Sets <code>value</code> as the attribute value for AprvlDescr.
     * @param value value to set the AprvlDescr
     */
    public void setAprvlDescr(String value) {
        setAttributeInternal(APRVLDESCR, value);
    }

    /**
     * Gets the attribute value for Status, using the alias name Status.
     * @return the Status
     */
    public String getStatus() {
        return (String)getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Status.
     * @param value value to set the Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getApprovalSteps() {
        return (RowIterator)getAttributeInternal(APPROVALSTEPS);
    }


    /**
     * @param idAprvlFlow key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence idAprvlFlow) {
        return new Key(new Object[]{idAprvlFlow});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq =
            new SequenceImpl("APPROVAL_FLOW_SEQ", getDBTransaction());
        Number seqNum = seq.getSequenceNumber(); 
        String flowVersion = this.getVersion();
        String approvalCode = "AF" + String.format("%05d", seqNum.getBigDecimalValue().intValue()) + "v" + flowVersion.replaceAll("/[^a-z0-9]/gmi", "").replaceAll("/[\\W_]+/g","");
        this.setIdAprvlFlow(new DBSequence(seqNum));
        this.setAprvlCode(approvalCode);
    }

}
