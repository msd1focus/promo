package app.fpp.model.entities.masterdata;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jul 14 16:05:04 ICT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SalesRegionImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        SalesRegionId {
            public Object get(SalesRegionImpl obj) {
                return obj.getSalesRegionId();
            }

            public void put(SalesRegionImpl obj, Object value) {
                obj.setSalesRegionId((DBSequence)value);
            }
        }
        ,
        RegionCode {
            public Object get(SalesRegionImpl obj) {
                return obj.getRegionCode();
            }

            public void put(SalesRegionImpl obj, Object value) {
                obj.setRegionCode((String)value);
            }
        }
        ,
        RegionLabel {
            public Object get(SalesRegionImpl obj) {
                return obj.getRegionLabel();
            }

            public void put(SalesRegionImpl obj, Object value) {
                obj.setRegionLabel((String)value);
            }
        }
        ,
        Descr {
            public Object get(SalesRegionImpl obj) {
                return obj.getDescr();
            }

            public void put(SalesRegionImpl obj, Object value) {
                obj.setDescr((String)value);
            }
        }
        ,
        Status {
            public Object get(SalesRegionImpl obj) {
                return obj.getStatus();
            }

            public void put(SalesRegionImpl obj, Object value) {
                obj.setStatus((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(SalesRegionImpl object);

        public abstract void put(SalesRegionImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int SALESREGIONID = AttributesEnum.SalesRegionId.index();
    public static final int REGIONCODE = AttributesEnum.RegionCode.index();
    public static final int REGIONLABEL = AttributesEnum.RegionLabel.index();
    public static final int DESCR = AttributesEnum.Descr.index();
    public static final int STATUS = AttributesEnum.Status.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SalesRegionImpl() {
    }

    /**
     * Gets the attribute value for SalesRegionId, using the alias name SalesRegionId.
     * @return the SalesRegionId
     */
    public DBSequence getSalesRegionId() {
        return (DBSequence)getAttributeInternal(SALESREGIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SalesRegionId.
     * @param value value to set the SalesRegionId
     */
    public void setSalesRegionId(DBSequence value) {
        setAttributeInternal(SALESREGIONID, value);
    }

    /**
     * Gets the attribute value for RegionCode, using the alias name RegionCode.
     * @return the RegionCode
     */
    public String getRegionCode() {
        return (String)getAttributeInternal(REGIONCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for RegionCode.
     * @param value value to set the RegionCode
     */
    public void setRegionCode(String value) {
        setAttributeInternal(REGIONCODE, value);
    }

    /**
     * Gets the attribute value for RegionLabel, using the alias name RegionLabel.
     * @return the RegionLabel
     */
    public String getRegionLabel() {
        return (String)getAttributeInternal(REGIONLABEL);
    }

    /**
     * Sets <code>value</code> as the attribute value for RegionLabel.
     * @param value value to set the RegionLabel
     */
    public void setRegionLabel(String value) {
        setAttributeInternal(REGIONLABEL, value);
    }

    /**
     * Gets the attribute value for Descr, using the alias name Descr.
     * @return the Descr
     */
    public String getDescr() {
        return (String)getAttributeInternal(DESCR);
    }

    /**
     * Sets <code>value</code> as the attribute value for Descr.
     * @param value value to set the Descr
     */
    public void setDescr(String value) {
        setAttributeInternal(DESCR, value);
    }

    /**
     * Gets the attribute value for Status, using the alias name Status.
     * @return the Status
     */
    public String getStatus() {
        return (String)getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Status.
     * @param value value to set the Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param salesRegionId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence salesRegionId) {
        return new Key(new Object[]{salesRegionId});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("app.fpp.model.entities.masterdata.SalesRegion");
        }
        return mDefinitionObject;
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("SALES_REGION_SEQ", getDBTransaction());
        this.setSalesRegionId(new DBSequence(seq.getSequenceNumber()));
    }
}
